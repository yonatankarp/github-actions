name: build
on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: false
        description: the application name
        default: ${{ github.event.repository.name }}
      context:
        type: string
        required: false
        description: the context in which CI should look for the code
        default: ${{ github.event.repository.name }}
      build_dockerfile:
        type: boolean
        required: false
        description: defines if docker build should be executed or not
        default: true
      dockerfile_path:
        type: string
        required: false
        description: the location of the dockerfile related to this module

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v4
        # Do not trigger a checkout when opening PRs from a fork (helps avoid "pwn request".
        # See https://docs.github.com/en/actions/reference/events-that-trigger-workflows#pull_request_target)
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dependabot Checkout
        if: github.actor == 'dependabot[bot]'
        uses: actions/checkout@v4
        with:
          # Dependabot can only checkout at the HEAD of the PR branch
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Java
        uses: actions/setup-java@v5
        with:
          java-version: 21
          distribution: 'temurin'
          # Instead of manually configure caching of gradle, use an action which
          # is provided. Details here: https://github.com/actions/setup-java
          cache: gradle

      - name: Find Dockerfile Location
        id: dockerfile
        run: |
          if [ -z "${{ inputs.dockerfile_path }}" ]; then
            echo "location=${{ inputs.app_name }}/Dockerfile" >> "$GITHUB_OUTPUT"
          else
            echo "location=${{ inputs.dockerfile_path }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for Changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            source_code:
              - '.github/workflows/**'
              - 'gradle/libs.versions.toml'
              - '${{ inputs.context }}/src/**'
              - '${{ steps.dockerfile.outputs.location }}'
              - '${{ inputs.context }}/build.gradle.kts'
              - 'build.gradle.kts'
              - 'gradlew'
              - 'gradlew.bat'
              - 'settings.gradle.kts'

      - name: Determine Gradle Build Command
        id: gradle_build
        run: |
          if [ -f "${{ inputs.context }}/build.gradle.kts" ] && [ "${{ inputs.context }}" != "." ]; then 
            echo "command=build :${{ inputs.context }}:build" >> "$GITHUB_OUTPUT"
            echo "Build command: 'build :${{ inputs.context }}:build' for subproject: ${{ inputs.context }}"
          else
            echo "command=build" >> "$GITHUB_OUTPUT"
            echo "Build command: 'build' for root project"
          fi

      - name: Gradle Test
        if: steps.changes.outputs.source_code == 'true'
        id: tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew ${{ steps.gradle_build.outputs.command }}

      - name: Build Docker Image
        if: inputs.build_dockerfile && steps.changes.outputs.source_code == 'true'
        id: container
        run: |
          sanitized_app_name=$(echo "${{ inputs.app_name }}" | tr '[:upper:]' '[:lower:]')
          docker build --file "${{ steps.dockerfile.outputs.location }}" --tag "${sanitized_app_name}:latest" .
